package lab6;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;

import lab6.NetworkFlowSolverBase.Edge;

import java.util.ArrayList;
import java.util.Comparator;

public class run {

	public static void main(String[] args) throws FileNotFoundException {

		long a = System.currentTimeMillis();
		DataTuple data = readData();
		long b = System.currentTimeMillis();

		// System.out.println("TIME TO GATHER DATA: " + (b - a));

		solution s = new solution(data);

	}

	// Reads data from input, sends to solution class.
	private static DataTuple readData() throws FileNotFoundException {
		ArrayList<ArrayList<Integer>> gatherData = new ArrayList<>();
		ArrayList<Integer> dataList = new ArrayList<>();
		int nbrNodes = 0;
		int nbrEdges = 0;
		int capacity = 0;
		int nbrRoutes = 0;  // Ta bort så många som möjligt, behöver ej ta bort alla och är ej prioriterade.
		ArrayList<Edge> edges = new ArrayList<>();
		
		File file = new File("data/sample/1.in");

		try {
			Scanner scanner = new Scanner(file);
			nbrNodes = scanner.nextInt();
			nbrEdges = scanner.nextInt();
			capacity = scanner.nextInt();
			nbrRoutes = scanner.nextInt();

			for (int i = 0; i < nbrEdges; i++) {
				int n1 = scanner.nextInt();
				int n2 = scanner.nextInt();
				int c = scanner.nextInt();

				edges.add(new Edge(n1, n2, c));
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		DataTuple dataTuple = new DataTuple(edges, nbrNodes, nbrEdges, capacity, nbrRoutes);
		
		return dataTuple;

	}
	
	// Used to contain multiple types of data.
	static class DataTuple{
		ArrayList<Edge> edges = new ArrayList<>();
		int nbrNodes;
		int nbrEdges;
		int capacity;
		int nbrRoutes;
		
		public DataTuple(ArrayList<Edge> edges, int nbrNodes, int nbrEdges, int capacity, int nbrRoutes) {
			this.edges = edges;
			this.nbrNodes = nbrNodes;
			this.nbrEdges = nbrEdges;
			this.capacity = capacity;
			this.nbrRoutes = nbrRoutes;
		}
		
	}

	public static class Edge {
	    public int from, to;
	    public Edge residual;
	    public long flow, cost;
	    public final long capacity, originalCost;

	    public Edge(int from, int to, long capacity) {
	      this(from, to, capacity, 0 /* unused */);
	    }

	    public Edge(int from, int to, long capacity, long cost) {
	      this.from = from;
	      this.to = to;
	      this.capacity = capacity;
	      this.originalCost = this.cost = cost;
	    }

	    public boolean isResidual() {
	      return capacity == 0;
	    }

	    public long remainingCapacity() {
	      return capacity - flow;
	    }

	    public void augment(long bottleNeck) {
	      flow += bottleNeck;
	      residual.flow -= bottleNeck;
	    }

	    public String toString(int s, int t) {
	      String u = (from == s) ? "s" : ((from == t) ? "t" : String.valueOf(from));
	      String v = (to == s) ? "s" : ((to == t) ? "t" : String.valueOf(to));
	      return String.format(
	          "Edge %s -> %s | flow = %d | capacity = %d | is residual: %s",
	          u, v, flow, capacity, isResidual());
	    }	
	}
}