package lab6;

import static java.lang.Math.min;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import lab6.run.DataTuple;
import lab6.run.Edge;

public class FordFulkersonDfs extends NetworkFlowSolverBase {
	
	public static void main(String[] args) throws FileNotFoundException {
		
	    // exampleFromSlides();
	    // testSmallFlowGraph();
	    //exampleFromSlides2();

		long a = System.currentTimeMillis();
		DataTuple data = readData();
		long b = System.currentTimeMillis();
		// System.out.println("TIME TO GATHER DATA: " + (b - a));
		
		int n = data.nbrNodes;
		int s = data.nbrNodes-2;
		int t = data.nbrNodes-1;

		FordFulkersonDfs solver;
	    solver = new FordFulkersonDfs(n, s, t);
	    
	    for (int i = 0; i < n; i++) {
	    	solver.addEdge(data.edges.get(i).from, data.edges.get(i).to, data.edges.get(i).capacity);
	    }
	}

	// Reads data from input, sends to solution class.
	private static DataTuple readData() throws FileNotFoundException {
		ArrayList<ArrayList<Integer>> gatherData = new ArrayList<>();
		ArrayList<Integer> dataList = new ArrayList<>();
		int nbrNodes = 0;
		int nbrEdges = 0;
		int capacity = 0;
		int nbrRoutes = 0;  // Ta bort så många som möjligt, behöver ej ta bort alla och är ej prioriterade.
		ArrayList<Edge> edges = new ArrayList<>();
		
		File file = new File("data/sample/1.in");

		try {
			Scanner scanner = new Scanner(file);
			nbrNodes = scanner.nextInt();
			nbrEdges = scanner.nextInt();
			capacity = scanner.nextInt();
			nbrRoutes = scanner.nextInt();

			for (int i = 0; i < nbrEdges; i++) {
				int n1 = scanner.nextInt();
				int n2 = scanner.nextInt();
				int c = scanner.nextInt();

				edges.add(new Edge(n1, n2, c));
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		DataTuple dataTuple = new DataTuple(edges, nbrNodes, nbrEdges, capacity, nbrRoutes);
		
		return dataTuple;

	}
	
	// Used to contain multiple types of data.
	static class DataTuple{
		ArrayList<Edge> edges = new ArrayList<>();
		int nbrNodes;
		int nbrEdges;
		int capacity;
		int nbrRoutes;
		
		public DataTuple(ArrayList<Edge> edges, int nbrNodes, int nbrEdges, int capacity, int nbrRoutes) {
			this.edges = edges;
			this.nbrNodes = nbrNodes;
			this.nbrEdges = nbrEdges;
			this.capacity = capacity;
			this.nbrRoutes = nbrRoutes;
		}
		
	}

	public static class Edge {
	    public int from, to;
	    public Edge residual;
	    public long flow, cost;
	    public final long capacity, originalCost;

	    public Edge(int from, int to, long capacity) {
	      this(from, to, capacity, 0 /* unused */);
	    }

	    public Edge(int from, int to, long capacity, long cost) {
	      this.from = from;
	      this.to = to;
	      this.capacity = capacity;
	      this.originalCost = this.cost = cost;
	    }

	    public boolean isResidual() {
	      return capacity == 0;
	    }

	    public long remainingCapacity() {
	      return capacity - flow;
	    }

	    public void augment(long bottleNeck) {
	      flow += bottleNeck;
	      residual.flow -= bottleNeck;
	    }

	    public String toString(int s, int t) {
	      String u = (from == s) ? "s" : ((from == t) ? "t" : String.valueOf(from));
	      String v = (to == s) ? "s" : ((to == t) ? "t" : String.valueOf(to));
	      return String.format(
	          "Edge %s -> %s | flow = %d | capacity = %d | is residual: %s",
	          u, v, flow, capacity, isResidual());
	    }	
	}
	
	

  /**
   * Creates an instance of a flow network solver. Use the {@link #addEdge(int, int, int)} method to
   * add edges to the graph.
   *
   * @param n - The number of nodes in the graph including source and sink nodes.
   * @param s - The index of the source node, 0 <= s < n
   * @param t - The index of the sink node, 0 <= t < n, t != s
   */
  public FordFulkersonDfs(int n, int s, int t) {
    super(n, s, t);
  }

  // Performs the Ford-Fulkerson method applying a depth first search as
  // a means of finding an augmenting path.
  @Override
  public void solve() {

    // Find max flow by adding all augmenting path flows.
    for (long f = dfs(s, INF); f != 0; f = dfs(s, INF)) {
      markAllNodesAsUnvisited();
      maxFlow += f;
    }

    // Find min cut.
    for (int i = 0; i < n; i++) if (visited(i)) minCut[i] = true;
  }

  private long dfs(int node, long flow) {
    // At sink node, return augmented path flow.
    if (node == t) return flow;

    List<Edge> edges = graph[node];
    visit(node);

    for (Edge edge : edges) {
      long rcap = edge.remainingCapacity();
      if (rcap > 0 && !visited(edge.to)) {
        long bottleNeck = dfs(edge.to, min(flow, rcap));

        // Augment flow with bottle neck value
        if (bottleNeck > 0) {
          edge.augment(bottleNeck);
          return bottleNeck;
        }
      }
    }
    return 0;
  }

  /* Example */

  private static void exampleFromSlides2() {
    int n = 12;
    int s = n - 2;
    int t = n - 1;

    FordFulkersonDfs solver;
    solver = new FordFulkersonDfs(n, s, t);

    solver.addEdge(s, 1, 2);
    solver.addEdge(s, 2, 1);
    solver.addEdge(s, 0, 7);

    solver.addEdge(0, 3, 2);
    solver.addEdge(0, 4, 4);

    solver.addEdge(1, 4, 5);
    solver.addEdge(1, 5, 6);

    solver.addEdge(2, 3, 4);
    solver.addEdge(2, 7, 8);

    solver.addEdge(3, 6, 7);
    solver.addEdge(3, 7, 1);

    solver.addEdge(4, 5, 8);
    solver.addEdge(4, 8, 3);

    solver.addEdge(5, 8, 3);

    solver.addEdge(6, t, 1);
    solver.addEdge(7, t, 3);
    solver.addEdge(8, t, 4);

    System.out.println(solver.getMaxFlow());

    List<Edge>[] g = solver.getGraph();
    for (List<Edge> edges : g) {
      for (Edge e : edges) {
        if (e.to == s || e.from == t) continue;
        if (e.from == s || e.to == t || e.from < e.to) System.out.println(e.toString(s, t));
        // System.out.println(e.residual.toString(s, t));
      }
    }
  }

  private static void exampleFromSlides() {
    int n = 6;
    int s = n - 2;
    int t = n - 1;

    FordFulkersonDfs solver;
    solver = new FordFulkersonDfs(n, s, t);

    solver.addEdge(s, 1, 10);
    solver.addEdge(1, 3, 15);
    solver.addEdge(3, 0, 6);
    solver.addEdge(0, 2, 25);
    solver.addEdge(2, t, 10);

    solver.addEdge(s, 0, 10);
    solver.addEdge(3, t, 10);

    System.out.println(solver.getMaxFlow());

    List<Edge>[] g = solver.getGraph();
    for (List<Edge> edges : g) {
      for (Edge e : edges) {
        System.out.println(e.toString(s, t));
        // System.out.println(e.residual.toString(s, t));
      }
    }
  }

  // Testing graph from:
  // http://crypto.cs.mcgill.ca/~crepeau/COMP251/KeyNoteSlides/07demo-maxflowCS-C.pdf
  private static void testSmallFlowGraph() {
    int n = 6;
    int s = n - 1;
    int t = n - 2;

    FordFulkersonDfs solver;
    solver = new FordFulkersonDfs(n, s, t);

    // Source edges
    solver.addEdge(s, 0, 10);
    solver.addEdge(s, 1, 10);

    // Sink edges
    solver.addEdge(2, t, 10);
    solver.addEdge(3, t, 10);

    // Middle edges
    solver.addEdge(0, 1, 2);
    solver.addEdge(0, 2, 4);
    solver.addEdge(0, 3, 8);
    solver.addEdge(1, 3, 9);
    solver.addEdge(3, 2, 6);

    System.out.println(solver.getMaxFlow()); // 19
  }
}